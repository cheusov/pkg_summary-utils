#!@SH@
#-*-mode:  sh -*-

# Copyright (c) 2007-2010, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -e

export PATH=$PSS_PRE_PATH:$PATH:$PSS_POST_PATH

. pipestatus

export LC_ALL=C

############################################################
# user settable variables
PKGSRCDIR=${PKGSRCDIR:=@PKGSRCDIR@}
BMAKE=${BMAKE:=@BMAKE@}
PSS_MKSCRIPTSDIR=${PSS_MKSCRIPTSDIR:=@mkscriptsdir@}
LIBEXECDIR=${LIBEXECDIR:=@libexecdir@}
PKG_INFO_CMD="${PKG_INFO_CMD-@PKG_INFO_CMD@}"

############################################################
usage (){
    cat 1>&2 <<EOF
pkg_src_summary - builds summary information
about source packages

usage:
  pkg_src_summary [OPTIONS] [pkgpath1 pkgpath2 ...]
  pkg_src_summary -s [OPTIONS]
  pkg_src_summary -i [OPTIONS]
OPTIONS:
  -h              display this help message
  -p              generate PLIST using 'bmake plist'
  -i              generate src_summary for the installed packages only,
                  do not read list of packages from stdin and
                  from pkgpathN arguments
  -f <fields>     list of fields (separated by space or comma)
                  to be included to summary,
                  by default FULL summary is generated
  -s              ready for use as paexec slave/remote program
                  (used internally for generating summary in parallel
                  when PSS_SLAVES is set)
  -a <fields>     add the specified fields to the list
                             of default ones
  -r <fields>     remove the specified fields from the list
                             of default ones
  -b              add BOOTSTRAP_DEPENDS to BUILD_DEPENDS
  -l              add library dependencies (bl3.mk) to BUILD_DEPENDS
  -d              also generates summary for dependancies (DEPENDS)
  -D              also generates summary for dependancies (BUILD_DEPENDS)
  -A              implies -d and -D
  -m              generate ASSIGNMENTS field
                  for multi-variant packages
  -M              implies -m and move/add ASSIGNMENTS to PKGPATH field
  -G              for debugging
EOF
}

# list of fields for default pkg_src_summary
if test -z "$PSS_FIELDS"; then
    PSS_FIELDS='PKGNAME PKGPATH DEPENDS BUILD_DEPENDS CONFLICTS HOMEPAGE COMMENT LICENSE ONLYFOR NOTFOR MAINTAINER CATEGORIES NO_BIN_ON_FTP NO_SRC_ON_FTP NO_BIN_ON_CDROM NO_SRC_ON_CDROM LICENSE ALLSRCFILES DESCRIPTION PLIST' # CVS_CHECKSUM ALLDISTFILES
fi

if test -z "$PSS_PPERS"; then
    PSS_PPERS=10
fi

PSS_PPERS=1 # until I really fix it.

set_fields (){
    PSS_FIELDS=$(echo $* | tr , ' ')
}

add_fields (){
    __fields=$(echo $* | tr , ' ')
    rem_fields $__fields
    for f in $__fields; do
	PSS_FIELDS="$PSS_FIELDS $f"
    done
}

rem_fields (){
    __fields=$(echo $* | tr , ' ')
    PSS_FIELDS=`awk '
BEGIN {
   for (i=1; i < ARGC; ++i){
      if (ARGV [i] == "-") break
      excl [ARGV [i]] = 1
   }
   for (++i; i < ARGC; ++i){
      if (! (ARGV [i] in excl)){
         printf "%s ", ARGV [i]
      }
   }
}
' $__fields - $PSS_FIELDS`
}

process_options (){
    alt_opts="$1"
    shift
    alt_getopt $alt_opts \
	'h help'        'usage; exit 0' \
	'=f fields'      'set_fields ' \
	'=a add-fields'  'add_fields ' \
	'=r rem-fields'  'rem_fields ' \
	's slave-mode'   slave=1       \
	'p make-plist'   make_plist='-p' \
	b        'add_fields BOOTSTRAP_DEPENDS BUILD_DEPENDS; with_bootstrap=-b' \
	l        'with_libdeps=-l'     \
	'd with-deps'    with_dep=-d   \
	'D with-bdeps'   with_bdep=-D  \
	'A with-alldeps' 'add_fields DEPENDS BUILD_DEPENDS;
	                 with_dep=-d; with_bdep=-D' \
	m                multi_var=1   \
	M                multi_var=2   \
	'i installed'    installed_pkgs=1 \
	G                debug=1 \
	-- "$@"
}
cmds=`process_options -c $PSS_OPTIONS`
eval "$cmds"
cmds=`process_options '' "$@"`
eval "$cmds"

pkgpaths="$*"

with_xxx="$with_bootstrap $with_libdeps"

if test "$multi_var"; then
    # VARIANTS - artificial field keeping all variable assignments
    # for multi-variant packages.
    add_fields '_VARIANTS'
fi

if test -n "$with_dep"; then
    add_fields DEPENDS
fi
if test -n "$with_bdep"; then
    add_fields BUILD_DEPENDS
fi

if echo "$PSS_FIELDS" | grep DESCRIPTION > /dev/null; then
    field_descr=1
fi
if echo "$PSS_FIELDS" | grep PLIST > /dev/null; then
    field_plist=1
fi
if echo "$PSS_FIELDS" | grep ALLDISTFILES > /dev/null; then
    field_alldistfiles=1
fi
if echo "$PSS_FIELDS" | grep CVS_CHECKSUM > /dev/null; then
    field_cvs_checksum=1
fi
varnames=`echo $PSS_FIELDS |
   awk '{gsub(/PLIST/, "")
         gsub(/CVS_CHECKSUM/, "")
         gsub(/ONLYFOR/, "ONLY_FOR_PLATFORM")
         gsub(/NOTFOR/,  "NOT_FOR_PLATFORM")
         gsub(/DESCRIPTION/, "DESCR_SRC")
         print}'`

if test -n "$debug"; then
    echo '===== PSS_FIELDS: =========' 1>&2
    echo "$PSS_FIELDS" 1>&2
fi

############################################################
cd $PKGSRCDIR

tmp_dir=`mktemp -d /tmp/pkg_src_summary.XXXXXX`
trap "rm -rf $tmp_dir" 0 1 2 15
test -n "$tmp_dir" || exit 1

tmpfn=$tmp_dir/pkgdirs2info.txt
errsfn=$tmp_dir/errors.txt
summaryfn=$tmp_dir/summary.txt
real_plistfn=$tmp_dir/real_plist.txt
multi_pkgs_fn=$tmp_dir/multi_pkgs.txt
normal_pkgs_fn=$tmp_dir/normal_pkgs.txt

############################################################
enrich_summary (){
    awk -v with_bootstrap="$with_bootstrap" '
    with_bootstrap != "" && $0 ~ /^BOOTSTRAP_DEPENDS=/ {\
	bootstrapdeps = substr($0, 19)
	next
    }
    with_bootstrap != "" && $0 ~ /^BUILD_DEPENDS=/ {
	builddeps = substr($0, 15)
	next
    }
    $0 ~ /^DESCR_SRC=/ {
	$0 = substr($0, 11)
	for (i=1; i <= NF; ++i){
	    while (0 < ret = (getline ln < $i)){
		print "DESCRIPTION=" ln
	    }
	    if (ret < 0){
		printf "reading from `" $i "` failed\n" > "/dev/stderr"
		exit 1
	    }
	    close($i)
	}
	next
    }
    {
	gsub(/ONLY_FOR_PLATFORM/, "ONLYFOR")
	gsub(/NOT_FOR_PLATFORM/, "NOTFOR")
	print
    }
    END {
	if (builddeps != "" || bootstrapdeps != "")
	    print "BUILD_DEPENDS=" builddeps " " bootstrapdeps
    }' "$@"
}

prepand_PLIST () {
    awk '/^[^@]/ {print "PLIST=" $0}' "$@"
}

pkgpath2multivar_opts (){
    # textproc/dictem:EMACS_TYPE=xemacs215 -> EMACS_TYPE=xemacs215
    # sysutils/mc:PKG_OPTIONS.mc=-x11~-slang -> PKG_OPTIONS.mc='-x11 -slang'
    # sysutils/mc:A=a,B=b -> A=a B=b
    sed -e 's|^[^:]*:||' -e 's|,| |g' -e "s|[^ ][^ ]*|'&'|g" -e 's|~| |g'
}

get_alldistfiles (){
    awk -F'[ =()]*' \
	'$1 == "Size" {printf " %s:%s", $2, $3}
	END {print ""}
    ' "$@"
}

cd_and_print_summary (){
    # $1 - pkgpath
    real_pkgpath="`echo $1 | cut -d: -f1`"
    if test "$real_pkgpath" = "$1"; then
	var_assigns=''
    else
	var_assigns="$(echo $1 | pkgpath2multivar_opts)"
	var_assignments="_ASSIGNMENTS='$(echo $1 | sed 's,^[^:]*:,,')'"
    fi

    extra_mk=''
    if test -f mk/pbulk/pbulk-index.mk; then
	extra_mk='-f ../../mk/pbulk/pbulk-index.mk'
    fi

    # INHER_ASSIGNS must be before DEPENDS and BUILD_DEPENDS, see below
    ( cd "$real_pkgpath" && eval ${BMAKE} -f ./Makefile $extra_mk \
	-f "$PSS_MKSCRIPTSDIR"/pkg_src_summary.mk my-show-vars \
	VARNAMES="'_INHER_ASSIGNS _INHER_ASSIGNS_REJ _INHER_ASSIGNS_BAD ASSIGNMENTS $varnames'" \
	$var_assignments $var_assigns ) > "$tmpfn" || return 1

    enrich_summary "$tmpfn" >"$summaryfn" || return 1

    # CVS_CHECKSUM
    if test "$field_cvs_checksum"; then
	cvs_checksum "$real_pkgpath" > "$tmpfn" || return 1
	read cksum < "$tmpfn" || return 1
	printf "CVS_CHECKSUM=%s\n" "$cksum" >>"$summaryfn" || return 1
    fi

    # alldistfiles
    if test "$field_alldistfiles"; then
	distinfo_fns="$(cd $real_pkgpath && ${BMAKE} show-var VARNAME=DISTINFO_FILE)"
	# /dev/null is a protection against distinfo_fns emptyness
	alldistfiles=$(get_alldistfiles $distinfo_fns /dev/null)
	printf "ALLDISTFILES=%s\n" "$alldistfiles" >>"$summaryfn" || return 1
    fi

    # PLIST
    if test "$field_plist"; then
	if test -n "$make_plist" && \
	    rm -f "$real_plistfn" && \
	    ( cd "$real_pkgpath" && \
	    eval ${BMAKE} PLIST="$real_plistfn" $var_assigns plist 2>/dev/null 1>&2)
	then
	    prepand_PLIST "$real_plistfn" >> "$summaryfn" || return 1
	else
	    plist_fns="$(cd $real_pkgpath && ${BMAKE} show-var VARNAME=PLIST_SRC)"
	    for plist_fn in $plist_fns; do
		if test -f $plist_fn; then
		    prepand_PLIST $plist_fn >>"$summaryfn" || return 1
		fi
	    done
	fi
    fi
}

summary2deps (){
    awk '
match($0, /^(BUILD_)?DEPENDS=/) {
   $0=substr($0, RLENGTH+1)
   gsub(/[^ :]*:[.][.]\/[.][.]\//, "")
   print
}' "$@"
}

generate_summary (){
    # general information
    if cd_and_print_summary $1 2>"$errsfn"
    then
	all_deps=$(summary2deps "$summaryfn")

	bad_deps=''
	for d in $all_deps; do
	    if ! test -d "$PKGSRCDIR/$d"; then
		if test -z "$bad_deps"; then
		    printf ' ------------------\n' 1>&2
		    printf "Bad package %s, skipped\n" "$1" 1>&2
		fi
		bad_deps=1
		printf "     not existing dependancy: %s\n" "$d" 1>&2
	    fi
	done

	if test -z "$bad_deps"; then
	    cat "$summaryfn"

	    echo '' # empty line - separator
	fi
    else
	printf ' ------------------\n' 1>&2
	printf "Bad package %s, skipped\n" "$1" 1>&2
	cat "$errsfn" 1>&2
    fi
}

############################################################
installed_packages2stdout (){
    $PKG_INFO_CMD -Xa | sed -n 's,^PKGPATH=,,p'
}

packages2stdout__1per_line (){
    if test -n "$installed_pkgs"; then
	installed_packages2stdout
    elif test $# -eq 0; then
	# processing stdin
	awk '{for (i=1; i <= NF; ++i) {print $i}}' "$@"
    else
	# processing arguments
	for pkgpath in "$@"; do
	    echo "$pkgpath"
	done
    fi
}

packages2stdout (){
    packages2stdout__1per_line "$@" |
    awk -v pss_ppers=$PSS_PPERS '
    {
        printf " %s", $0
    }
    ((NR-1) % pss_ppers) == 0 {
        printf "\n"
    }
    END {
        if (((NR-1) % pss_ppers) != 0){
            printf "\n"
        }
    }'
}

process_one_by_one (){
    if test "$slave"; then
	prepand="awk '"'{print " " $0}'"'"
    else
	prepand=cat
    fi

    while read pkgpaths; do
	for pkgpath in $pkgpaths; do
	    generate_summary "$pkgpath" | eval $prepand
	done

	if test "$slave"; then
	    printf 'success\n\n' # for paexec
	fi
    done
}

############################################################
# direct packages
partial_summary_fn=$tmp_dir/partial_summary.txt

if test "$PSS_SLAVES"; then
    qfields="$(echo $PSS_FIELDS | sed 's| |,|g')"
    environ="PSS_SLAVES= BMAKE=$BMAKE CKSUM=$CKSUM PKGSRCDIR=$PKGSRCDIR"
    environ="$environ PSS_PRE_PATH=$PSS_PRE_PATH PSS_POST_PATH=$PSS_POST_PATH"

    runpipe0 \
	packages2stdout $pkgpaths '|' \
	paexec -slez $PSS_PAEXEC_EXTRA_OPTS \
	    -n "$PSS_SLAVES" \
	    -t "$PSS_TRANSPORT" \
	    -c "env $environ $0 -s $with_xxx -f '$qfields'" '|' \
	paexec_reorder -S '|' \
	sed -e '/^success$/ d' -e '/^failure$/ d' > "$partial_summary_fn"
elif test "$slave"; then
    process_one_by_one
    exit 0
else
    PSS_PPERS=1 # one package per line for local running

    runpipe0 \
	packages2stdout $pkgpaths '|' \
	process_one_by_one > "$partial_summary_fn"
fi

############################################################
# multi-variant packages
export PSS_FIELDS

summary2all_variants (){
    awk '
$1 ~ /PKGPATH=/ {
   pkgpath = substr($0, 9)
   next
}

$1 ~ /_VARIANTS=/ {
   variants = substr($0, 11)
   next
}

NF == 0 {
   $0 = variants
   count = 0
   for (k=1; k <= NF; ++k){
      values = varname = $k
      sub(/=.*$/, "", varname)
      sub(/^[^=]*=/, "", values)

      cnt = split(values, vals, /,/)

      if (count){
         new_count = count
         for (i=1; i <= count; ++i){
            if (!(i in variant)) continue

            for (j=1; j <= cnt; ++j){
               ++new_count
               variant [new_count] = (variant [i] "," varname "=" vals [j])
            }
            delete variant [i]
         }
         count = new_count
      }else{
         for (j=1; j <= cnt; ++j){
            variant [j] = (varname "=" vals [j])
         }
         count = cnt
      }
   }

   for (i = 1; i <= count; ++i){
      if (i in variant)
         print pkgpath ":" variant [i]
   }
   pkgpath = variants = ""

   delete variant
}
' "$@"
}

if test "_$multi_var" = _2; then
    move_ASSIGNMENTS_to_PKGPATH (){
	pkg_assignments2pkgpath "$@"
    }
else
    move_ASSIGNMENTS_to_PKGPATH (){
	cat "$@"
    }
fi

if test "$multi_var"; then
    pkg_grep_summary _VARIANTS 'fvalue != ""' \
	< $partial_summary_fn >$multi_pkgs_fn

    if test -s $multi_pkgs_fn; then
	pkg_grep_summary -e _VARIANTS \
	    < $partial_summary_fn >$normal_pkgs_fn
	mv $normal_pkgs_fn $partial_summary_fn

	runpipe0 \
	    summary2all_variants < $multi_pkgs_fn '|' \
	    env _PSS_RECURS=1 $0 $with_xxx $make_plist '|' \
	    move_ASSIGNMENTS_to_PKGPATH >> "$partial_summary_fn"
    fi
fi

############################################################
# dependencies

extra_deps_fn=$tmp_dir/extra_deps.txt

processed_pkgs_fn=$tmp_dir/processed_pkgs.txt

$LIBEXECDIR/get_processed_pkgs < "$partial_summary_fn" > "$processed_pkgs_fn"

deps1_all_fn=$tmp_dir/level1_all_deps.txt

while test -n "${with_dep}${with_bdep}"; do
    if test -n "$debug"; then
	echo '===== partial_summary: =========' 1>&2
	cat "$partial_summary_fn" 1>&2
    fi

    if test -n "$debug"; then
	echo '===== processed_pkgs: =========' 1>&2
	cat "$processed_pkgs_fn" 1>&2
    fi

    ##
    $LIBEXECDIR/direct_deps $with_dep $with_bdep -p "$processed_pkgs_fn" \
	"$partial_summary_fn" > "$extra_deps_fn"

    if test -n "$debug"; then
	echo '===== extra_deps: =========' 1>&2
	sort "$extra_deps_fn" 1>&2
    fi

    if ! test -s "$extra_deps_fn"; then
	break
    fi

    ##
    env _PSS_RECURS=1 $0 $with_xxx $make_plist \
	< "$extra_deps_fn" > "$deps1_all_fn".tmp
    pkg_grep_summary -e _INHER_ASSIGNS_BAD > "$deps1_all_fn" \
	< "$deps1_all_fn".tmp > "$deps1_all_fn"

    if test -n "$debug"; then
	echo '===== level-1 deps summaries =========' 1>&2
	cat "$deps1_all_fn" 1>&2
    fi

    ##
    cat "$deps1_all_fn" >> "$partial_summary_fn"

    pkg_uniq_summary "$partial_summary_fn" > "$partial_summary_fn".tmp
    mv "$partial_summary_fn".tmp "$partial_summary_fn"

    $LIBEXECDIR/get_processed_pkgs "$deps1_all_fn" >> "$processed_pkgs_fn"
    cat "$extra_deps_fn" >> "$processed_pkgs_fn"
    sort -u "$processed_pkgs_fn" > "$processed_pkgs_fn".tmp
    mv "$processed_pkgs_fn".tmp "$processed_pkgs_fn"
done

remove_internal_fields (){
    grep -v '^_.*=' "$@" || true
}

if test -z "$_PSS_RECURS"; then
    remove_internal_fields "$partial_summary_fn"
else
    cat "$partial_summary_fn"
fi
