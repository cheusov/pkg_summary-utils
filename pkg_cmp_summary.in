#!/usr/bin/env runawk

# Copyright (c) 2007-2010, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

############################################################

#env "LC_ALL=C"

#use "pkgsrc-dewey.awk"
#use "power_getopt.awk"

############################################################
#.begin-str help
# pkg_cmp_summary - compares two summary files
# usage: pkg_cmp_summary -h
#        pkg_cmp_summary [OPTIONS] summary1 summary2
# OPTIONS:
#   -h|--help            display this help
#   -p|--with-pkgpath    use PKGPATH:PKGBASE pair for identifing a package
#   -c|--use-checksum    also use CVS_CHECKSUM field in comparing packages
#   -m|--multi           support multi-variant packages, that is packages
#                         with building options in PKGPATH section
#   -P|--pkgpath         use PKGPATH only for comparison, ignore PKGNAME
#   -d                   consider packages different
#                        if they have different DEPENDS
#.end-str
############################################################

BEGIN {
	with_pkgname = 1

	with_pkgpath = getarg("p")
	use_checksum = getarg("c")
	use_dep      = getarg("d")
	if (getarg("P")){
		with_pkgpath = 1
		with_pkgname = 0
	}
	if (getarg("m")){
		with_multivar = 1
		with_pkgpath  = 1
	}

	for (ind=1; ind < ARGC && ARGV [ind] == ""; ++ind);

	if (ARGC != ind+2){
		usage()
		exit 1
	}

	file1 = ARGV [ind]
}

function trim (s){
	sub(/^[ \t]+/, "", s)
	sub(/[ \t]+$/, "", s)

	return s
}

with_pkgname && /^PKGNAME=/ {
	pkgname = trim(substr($0, 9))
	next
}

use_checksum && /^CVS_CHECKSUM=/ {
	checksum = trim(substr($0, 14))
	next
}

with_pkgpath && /^PKGPATH=/ {
	pkgpath = trim(substr($0, 9))
	full_pkgpath = pkgpath
	if (with_multivar && pkgpath ~ /:/){
		sub(/:.*$/, "", pkgpath)
	}
	next
}

use_dep && /^DEPENDS=/ {
	$0 = substr($0, 9)
	if (FILENAME == file1){
		for (i=1; i <= NF; ++i){
			dep1 [$i] = 0
		}
	}else{
		for (i=1; i <= NF; ++i){
			dep2 [$i] = 0
		}
	}
	next
}

NF == 0 {
	# ver
	ver = pkgname
	sub(/^.*-/, "", ver)

	# pkgbase
	sub(/-[^-]+$/, "", pkgname)

	# option PKGPATH
	if (with_pkgpath && with_pkgname){
		pkgbase      = pkgpath      " " pkgname
		full_pkgbase = full_pkgpath " " pkgname
	}else if (with_pkgpath){
		pkgbase      = pkgpath
		full_pkgbase = full_pkgpath
	}else{
		pkgbase      = pkgname
		full_pkgbase = pkgname
	}

	# current checksum
	curr_checksum = checksum

	# cleaning...
	pkgname = pkgpath = checksum = ""

	#
	if (FILENAME == file1){
		# first file!
		if (pkgbase in names){
			duplicates [pkgbase] += 1
		}else{
			names [pkgbase] = ver
			if (with_multivar && pkgpath != full_pkgpath){
				full_pkgpaths [pkgbase] = full_pkgbase
			}

			if (use_checksum){
				checksums [pkgbase] = curr_checksum
			}

			if (use_dep){
				for (dep in dep1){
					depends [pkgbase, ++depends_cnt [pkgbase]] = dep
				}
				delete dep1
			}
		}
	}else{
		# second file!
		present [pkgbase] = 0

		if (pkgbase in duplicates){
			next
		}

		if (! (pkgbase in names)){
			if (ver != "")
				print "+", full_pkgbase, ver
			else
				print "+", full_pkgbase

			next
		}

		res = "="

		# ! -P
		if (with_pkgname){
			ver1 = names [pkgbase]
			res = dewey_cmp(ver1, ver)
		}

		# -c
		if (use_checksum && res == "="){
			prev_checksum = checksums [pkgbase]
			if (prev_checksum != "" &&
				curr_checksum != "" &&
				prev_checksum != curr_checksum)
			{
				res = "!"
			}
		}

		# -d
		if (use_dep && res == "="){
			if (pkgbase in depends_cnt){
				cnt = depends_cnt [pkgbase]
				for (i=1; i <= cnt; ++i){
					dep = depends [pkgbase, i]
					if (dep in dep2){
						delete dep2 [dep]
					}else{
						res = "!"
						break
					}
				}
				if (res == "="){
					for (dep in dep2){
						res = "!"
						break
					}
				}
			}else{
				res = "!"
			}
			delete dep2
		}

		if (with_pkgname){
			# result!
			print res, full_pkgbase, ver1, ver
		}else{
			print res, full_pkgbase
		}
	}

	next
}

END {
	for (pkgbase in names){
		if (! (pkgbase in present)){
			if (names [pkgbase] != ""){
				nm = " " names [pkgbase]
			}else{
				nm = ""
			}

			if (pkgbase in full_pkgpaths)
				print "-", full_pkgpaths [pkgbase] nm
			else
				print "-", pkgbase nm

			delete duplicates [pkgbase]
		}else if (pkgbase in duplicates){
			print duplicates [pkgbase]+1, pkgbase
		}
	}
}
