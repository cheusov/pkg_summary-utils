#!/usr/bin/env runawk

# Copyright (c) 2008-2009 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

############################################################

#env "LC_ALL=C"

#use "power_getopt.awk"
#use "alt_assert.awk"
#use "braceexpand.awk"

############################################################
#.begin-str help
# pkg_summary2deps - converts pkg_summary to the dependency graph
#   by analysing pkgname:../../pkg/path and 
#   {alter,native}:../../pkg/path entries
#   in DEPENDS and BUILD_DEPENDS fields.
# Format of the output:
#   package1
#   package2 package3
#   ...
# Here package3 depends on package2, package1 has no dependencies.
# usage: pkg_summary2deps [OPTIONS] [files...]
# OPTIONS:
#   -h|--help            display this help
#   -p                   output PKGPATH
#   -n                   output PKGNAME
#   -d                   analyse DEPENDS
#   -D                   analyse BUILD_DEPENDS
#   -A                   analyse both DEPENDS and BUILD_DEPENDS
#   -t                   produce output compatible in tsort(1) command
#   -r                   do not strip versions from PKGNAME,
#                        imply -n
#   -R                   do not strip versions from dependencies,
#                        imply -n
#.end-str
############################################################

BEGIN {
	keep_ver = getarg("r")
	keep_depver = getarg("R")

	out_pkgname = keep_ver || keep_depver || getarg("n")
	out_pkgpath = getarg("p")

	mode_tsort  = getarg("t")

	dep_depends  = getarg("d")
	dep_builddep = getarg("D")
	if (getarg("A")){
		dep_builddep = dep_depends = 1
	}

	if (!out_pkgname && !out_pkgpath){
		print "Either -p or -n should be applied" > "/dev/stderr"
		exit 1
	}
	if (!dep_depends && !dep_builddep){
		print "Either -d, -D or -A should be applied" > "/dev/stderr"
		exit 1
	}
}

/^ASSIGNMENTS=/ {
	assigns = substr($0, 13)
	next
}

/^PKGPATH=/ {
	pkgpath = substr($0, 9)
	next
}

/^PKGNAME=/ {
	pkgbase = pkgname = substr($0, 9)
	if (!keep_ver)
		sub(/-[^-]+$/, "", pkgbase)

	next
}

dep_depends && /^DEPENDS=/ {
	deps = $0
	next
}

dep_builddep && /^BUILD_DEPENDS=/ {
	bdeps = $0
	next
}

function process_deps (){
	sub(/^[^=]+=/, "")

	for (i=1; i <= NF; ++i){
		if ($i ~ /[{]/){
			depname = braceexpand($i)
			sub(/ .*$/, "", depname)
			sub(/:.*$/, "", depname)

			idx = match(depname, /-\[[^\[\]]*\].$|(>|>=|<|<=|=|-)[^><=-]*$/)
			depbase = substr(depname, 1, idx-1)

			if (!keep_depver){
				depname = depbase
			}

			if (!out_pkgname)
				hidden_deps [depbase " " pkgpath] = depname
			else if (!out_pkgpath)
				hidden_deps [depbase " " pkgbase] = depname
			else
				hidden_deps [depbase " " pkgpath ";" pkgbase] = depname

			dep_pkgs [pkgpath] = 1
		}else{
			deppath = $i
			sub(/^[^:]*:(..\/..\/)?/, "", deppath)

			depname = $i
			sub(/:.*$/, "", depname)

			if (keep_depver){
				depbase = depname
			}else{
				idx = match(depname, /-\[[^\[\]]*\].$|(>|>=|<|<=|=|-)[^><=-]*$/)
				depbase = substr(depname, 1, idx-1)
			}

			if (!out_pkgname)
				full_deps [deppath " " pkgpath] = 1
			else if (!out_pkgpath)
				full_deps [depbase " " pkgbase] = 1
			else
				full_deps [deppath ";" depbase " " pkgpath ";" pkgbase] = 1

			dep_pkgs [pkgpath] = 1
			if (!keep_ver)
				dep_pkgs [deppath] = 1
		}
	}
}

NF == 0 {
	assert(pkgpath != "", "Cannot find pkgpath")

	if (assigns)
		pkgpath = pkgpath ":" assigns

	base = pkgbase
	sub(/-[^-]+$/, "", base)
	pkgpaths [base] = pkgpath
	pkgnames [pkgpath] = pkgname
	pkgbases [pkgpath] = pkgbase

	all_pkgs [pkgpath] = 1

	$0 = deps
	process_deps()

	$0 = bdeps
	process_deps()

	deps = bdeps = assigns = pkgpath = pkgbase = pkgname = ""
	next
}

function print_nodep_node (node){
	if (mode_tsort)
		print node, node
	else
		print node
}

function generate_pkgdepname (){
	if (keep_ver)
		pkgname = pkgnames [pkgpath]
	else
		pkgname = pkgbases [pkgpath]

	if (keep_depver)
		depname = pkgnames [dep]
	else
		depname = pkgbases [dep]
}

END {
	for (hdep in hidden_deps){
		depbase = hdep
		sub(/ .*$/, "", depbase)

		depname = hidden_deps [hdep]

		if (! (depbase in pkgpaths)){
			print "Cannot find PKGPATH for " depbase > "/dev/stderr"
			ex = 1
		}else{
			pkgpath = hdep
			sub(/^[^ ]* /, "", pkgpath)

			if (!out_pkgpath)
				print hidden_deps [hdep], pkgpath
			else if (!out_pkgname)
				print pkgpaths [depbase], pkgpath
			else
				print pkgpaths [depbase] ";" depname, pkgpath

			dep_pkgs [pkgpath] = 1
			if (!keep_ver)
				dep_pkgs [deppath] = 1
		}
	}

	for (hdep in full_deps){
		dep = hdep
		sub(/ .*$/, "", dep)
		pkgpath = hdep
		sub(/^.* /, "", pkgpath)

		print dep, pkgpath
	}

	for (pkgpath in all_pkgs){
		if (! (pkgpath in dep_pkgs)){
			if (!out_pkgname){
				print_nodep_node(pkgpath)
			}else{
				generate_pkgdepname()

				if (!out_pkgpath)
					print_nodep_node(pkgname)
				else
					print pkgpath ";" pkgname
			}
		}
	}

	exit ex
}
