#!/bin/sh

# Copyright (c) 2007-2008 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

. pipestatus

############################################################
# user settable variables
if test -z "$PKGSRCDIR"; then
    PKGSRCDIR=/usr/pkgsrc
fi

if test -z "$BMAKE"; then
    BMAKE=make
fi

############################################################
usage (){
    cat 1>&2 <<EOF
pkg_src_summary - builds summary information
about source packages

usage:
  pkg_src_summary [OPTIONS] [pkgpath1 pkgpath2 ...]
  pkg_src_summary -s [OPTIONS]
OPTIONS:
  -h|--help              display this help message
  -f|--fields <filename>
  -f|--fields=<filename> fields to be included too summary,
                         by default FULL summary is generated
  -s|--slave-mode        ready for use as paexec slave/remote program
EOF
}

# list of fields for default pkg_src_summary
fields='PKGNAME PKGPATH DEPENDS BUILD_DEPENDS CONFLICTS HOMEPAGE COMMENT LICENSE ONLYFOR NOTFOR MAINTAINER CATEGORIES DESCRIPTION PLIST'

while test $# -ne 0; do
    case "$1" in
	-h|--help)
	    usage
	    exit 0;;
	-f|--fields)
	    fields="$2"
	    shift;;
	-f=*|--fields=*)
	    fields="$(echo $1 | cut -f2 -d=)";;
	-s|--slave-mode)
	    slave=1;;
	--)
	    shift
	    break;;
	-*)
	    echo "Unrecognized option " $1 ". Type --help to see usage" 1>&2
	    exit 1;;
	*)
	    break;;
    esac
    shift
done

if echo "$fields" | grep DESCRIPTION > /dev/null; then
    field_descr=1
fi
if echo "$fields" | grep PLIST > /dev/null; then
    field_plist=1
fi
varnames="`echo $fields |
   awk '{gsub(/PLIST/, \"\")
         gsub(/ONLYFOR/, \"ONLY_FOR_PLATFORM\")
         gsub(/NOTFOR/,  \"NOT_FOR_PLATFORM\")
         gsub(/DESCRIPTION/, \"DESCR_SRC\")
         print}'`"

############################################################
cd $PKGSRCDIR

tmp_dir="/tmp/pkg_src_summary.$$"
trap "rm -rf $tmp_dir $new_summary" 0 1 2 15
mkdir -m 700 "$tmp_dir"

tmpfn=$tmp_dir/pkgdirs2info.txt
errsfn=$tmp_dir/errors.txt
summaryfn=$tmp_dir/summary.txt
tempsummaryfn=$tmp_dir/temp_summary.txt

############################################################
enrich_summary (){
    awk -F= '
    $1 == "DESCR_SRC" {
	fn = $2
	while (0 < ret = (getline < fn)){
	    print "DESCRIPTION=" $0
	}
	if (ret < 0){
	    printf "reading from `" fn "` failed\n" > "/dev/stderr"
	    exit 1
	}
	next
    }
    {
	gsub(/ONLY_FOR_PLATFORM/, "ONLYFOR")
	gsub(/NOT_FOR_PLATFORM/, "NOTFOR")
	print
    }' "$@"
}

enrich_Makefile (){
    cat <<EOF
.PHONY: my-show-vars
my-show-vars:
.for VARNAME in \${VARNAMES}
	@\${ECHO} \${VARNAME}=\${\${VARNAME}:Q}
.endfor

.include "./Makefile"
EOF
}

cd_and_print_summary (){
    # $1 - pkgpath
    ( cd $1 && enrich_Makefile |
	${BMAKE} -f - my-show-vars VARNAMES="$varnames" ) > "$tmpfn" || return 1

    enrich_summary "$tmpfn" >"$summaryfn" || return 1

    # not expanding PLIST yet
    if test "$field_plist"; then
	plist_fn=$1/PLIST
	if test -f $plist_fn; then
	    awk '/^[^@]/ {print "PLIST=" $0}' $plist_fn \
		>>"$summaryfn" || return 1
	fi
    fi
}

generate_summary (){
    # general information
    if cd_and_print_summary $1 2>"$errsfn"
    then
	cat "$summaryfn"

	echo '' # empty line - separator 
    else
	printf ' ------------------\n' 1>&2
	printf "Bad package %s, skipped\n" "$1" 1>&2
	cat "$errsfn" 1>&2
    fi
}

############################################################
packages2stdout (){
    if test $# -eq 0; then
	# processing stdin
	cat 
    else
	# processing arguments
	for pkgpath in "$@"; do
	    echo "$pkgpath"
	done
    fi
}

process_one_by_one (){
    if test "$slave"; then
	prepand="awk '"'{print " " $0}'"'"
    else
	prepand=cat
    fi

    while read pkgpath; do
	generate_summary "$pkgpath" | eval $prepand

	if test "$slave"; then
	    echo '' # for paexec
	fi
    done
}

add_NR (){
    awk '{print NR, $0}'
}

rem_two_first_tokens (){
    awk '{$1 = $2 = ""; print substr($0, 3)}'
}

restore_order (){
    runpipe0 add_NR '|' sort -k2n -k1n '|' rem_two_first_tokens
}

if test "$PSS_SLAVES"; then
    if test "$PSS_TRANSPORT"; then
	PSS_TRANSPORT="-t $PSS_TRANSPORT"
    fi

    environ="PSS_SLAVES= BMAKE=$BMAKE PKGSRCDIR=$PKGSRCDIR"
    qfields="`echo $fields | sed 's, ,\\\ ,g'`"

    runpipe0 \
	packages2stdout "$@" '|' \
	paexec -l -n "$PSS_SLAVES" $PSS_TRANSPORT \
	   -c "env $environ $0 -s -f '$qfields'" > "$tempsummaryfn"

    restore_order < "$tempsummaryfn"

elif test "$slave"; then
    process_one_by_one
else
    runpipe0 \
	packages2stdout "$@" '|' \
	process_one_by_one
fi
