#!/usr/bin/env runawk

# Copyright (c) 2010, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

############################################################

#env "LC_ALL=C"

#use "pkgsrc-dewey.awk"
#use "power_getopt.awk"
#use "psu_funcs.awk"
#use "has_prefix.awk"
#use "tmpfile.awk"
#use "xclose.awk"

############################################################
#.begin-str help
# pkg_lint_summary - does sanity check for summaries
# usage: pkg_lint_summary -h
#        pkg_lint_summary [OPTIONS] [files...]
# OPTIONS:
#   -h      display this help
#   -l      checks REQUIRES/PROVIDES consistency
#   -L      checks that libs from REQUIRES are present on filesystem
#   -d      checks that dependencies (DEPENDS) are satisfied
#   -D      checks that dependencies (BUILD_DEPENDS) are satisfied
#   -c      checks CONFLICTS
#   -u      checks unicity of PKGBASEs
#.end-str
############################################################

BEGIN {
	if (getarg("h")){
		print_help()
		exitnow(0)
	}

	prefix = ENVIRON ["PREFIX"]
	if (prefix == "")
		prefix = "@prefix@"

	opt_L = getarg("L")
	opt_l = getarg("l")
	opt_d = getarg("d")
	opt_D = getarg("D")
	opt_c = getarg("c")
	opt_u = getarg("u")

	cnt = 0

	if (!opt_L && !opt_l && !opt_d && !opt_D && !opt_c && !opt_u){
		print "At least one of the following options should be applied:\n     -L, -l, -d, -D, -c or -u" > "/dev/stderr"
		exitnow(1)
	}

	tmp_summary = tmpfile()
	if (opt_d || opt_D || opt_c)
		printf "" > tmp_summary
}

/^PKGNAME=/{
	pkgname = substr($0, 9)
	pkgbase = pkgname2pkgbase(pkgname)
	pkgver  = pkgname2version(pkgname)
}

/^PKGPATH=/{
	pkgpath = substr($0, 9)
}

opt_u {
	if (/^ASSIGNMENTS=/){
		assigns = substr($0, 13)
	}else if (NF == 0){
		if (assigns != "")
			path = pkgpath ":" assigns
		else
			path = pkgpath

		if (pkgbase in pkgbase2path){
			pkgbase2path [pkgbase] = pkgbase2path [pkgbase] " " path
		}else{
			pkgbase2path [pkgbase] = path
		}
	}
}

opt_l || opt_L {
	if (/^REQUIRES=/){
		requires1 = substr($0, 10)
		gsub(/\/\/+/, "/", requires1)
		if (!(requires1 in provides2pkg))
			requires [++requires_cnt] = requires1
		if (opt_L) { # && !has_prefix(requires1, prefix)){
			dirname = requires1
			sub(/\/[^\/]*\/?$/, "", dirname)
			syslibdirs [dirname] = 1
		}
	}else if (opt_l && /^PROVIDES=/){
		provides1 = substr($0, 10)
		gsub(/\/\/+/, "/", provides1)
		provides2pkg [provides1] = 1
	}else if (NF == 0){
		pkg = (pkgpath " " pkgname)
		for (i=1; i <= requires_cnt; ++i){
#			print "r:", requires [i], pkg
			req = requires [i]
			reqd_libs [req] = 1
			reqd_libs2where [req, ++reqd_libs2cnt [req]] = pkg
		}

		requires_cnt = 0
	}
}

opt_d || opt_D || opt_c {
	print > tmp_summary
}

NF == 0 {
	pkgname = pkgpath = pkgver = assigns = ""
}

function print_lib_notfound (prefix, lib,                        i){
	for (i=1; i <= reqd_libs2cnt [lib]; ++i){
		print prefix ": not_found " lib, reqd_libs2where [lib, i]
	}
}

END {
	ex = 0

	# -L
	if (opt_L){
		for (libdir in syslibdirs){
			pipe = "ls -1 '" libdir "' 2>/dev/null"
			while((pipe | getline lib) > 0){
				syslibs [libdir "/" lib] = 0
			}
			close(pipe)
		}

		for (p in reqd_libs){
			if (!(p in syslibs)){
				print_lib_notfound("L", p)
				ex = 1
			}
		}
	}

	# -l
	if (opt_l){
		for (p in reqd_libs){
			if (has_prefix(p, prefix) && !(p in provides2pkg)){
				print_lib_notfound("l", p)
				ex = 1
			}
		}
	}

	# -d -D -c
	if (opt_d || opt_D || opt_c){
		if (ex)
			fflush()

		xclose(tmp_summary)

		if (opt_d) opts = "d"
		if (opt_D) opts = opts "D"
		if (opt_c) opts = opts "c"

		cmd = "pkg_summary2deps -Xnls" opts " " tmp_summary " 2>&1 > /dev/null" 
		if (system(cmd))
			ex = 1
	}

	# -u
	if (opt_u){
		for (pkgbase in pkgbase2path){
			if (index(pkgbase2path [pkgbase], " ")){
				printf "u: unicity %s <- %s\n", pkgbase, pkgbase2path [pkgbase]
				ex = 1
			}
		}
	}

	exitnow(ex)
}
