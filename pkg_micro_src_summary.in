#!@SH@
#-*-mode:  sh -*-

# Copyright (c) 2007-2008 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

. pipestatus

############################################################
# user settable variables
export PKGSRCDIR=${PKGSRCDIR:=@PKGSRCDIR@} # export - for pkg_src_fetch_var
export BMAKE=${BMAKE:=@BMAKE@}
SH=${SH-@SH@}

############################################################
tmpdir=`mktemp -d /tmp/pkg_micro_src_summary.XXXXXX`
trap "rm -rf $tmpdir" 0 1 2 15
test -n $tmpdir || exit 1

errsfn=$tmpdir/errors.txt

############################################################
usage (){
    cat 1>&2 <<EOF
pkg_micro_src_summary - builds micro summary information
about source packages

usage: pkg_micro_src_summary [OPTIONS] [pkgpath1 pkgpath2 ...]
OPTIONS:
  -h              display this help message
  -f <fields>     fields to be included to summary,
                         PKGNAME and PKGPATH is the default
EOF
}

fields='PKGNAME PKGPATH'

set_fields (){
    fields=$(echo "$@" | tr , ' ')
}

process_args (){
    alt_getopt \
	'h help'    'usage; exit 0' \
	'=f fields' 'set_fields ' \
	s           'slave=1' \
	-- "$@"
}

cmds=`process_args "$@"`
eval "$cmds"

############################################################
cd $PKGSRCDIR

# running helper
helper_out=$tmpdir/helper_out.txt

list_pkgs (){
    if test $# -ne 0; then
	# processing arguments
	for pkgpath in "$@"; do
	    echo "$pkgpath"
	done
    else
	awk -v C=10 \
	    'BEGIN {modu=C-1}
	     { printf ",%s", $0; if ((NR % C) == modu) printf "\n"; }
	     END {if (NR && (NR % C) != modu) printf "\n"}'
    fi
}

if test "$slave"; then
    pkg_src_fetch_var -sf "$fields"
    exit 0
fi

pkg_src_fetch (){
    if test "$PSS_SLAVES"; then
	qfields="$(echo $fields | tr ' ' ,)"
	environ="PSS_SLAVES= BMAKE=$BMAKE PKGSRCDIR=$PKGSRCDIR"
	environ="$environ PSS_PRE_PATH=$PSS_PRE_PATH PSS_POST_PATH=$PSS_POST_PATH"

	runpipe0 \
	    paexec -glez $PSS_PAEXEC_EXTRA_OPTS \
		-n "$PSS_SLAVES" \
		-t "$PSS_TRANSPORT" \
		-c "env $environ $SH $0 -s -f '$qfields'" '|' \
	    paexec_reorder '|' \
	    sed '/^success$/ d'
    else
	pkg_src_fetch_var -f "$fields"
    fi
}

runpipe list_pkgs "$@" '|' pkg_src_fetch > "$helper_out"

# `+' to micro_summary (fast!)
awk -F'\t' -v fields="$fields" '
BEGIN {
   fcnt = split(fields, fname, " ")
}

/^[+]/ {
   for (i=1; i <= fcnt; ++i){
      printf "%s=%s\n", fname [i], $(i+1)
   }

   printf "\n"
}' "$helper_out"

# `-' to micro_summary (slo-o-o-ow!)
make_out=$tmpdir/make_out.txt
awk -F'\t' '
/^[-]/ {
   print $NF
}' "$helper_out" |
pkg_src_summary -f "$fields"
