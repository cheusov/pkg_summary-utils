#!/usr/bin/env runawk

# Copyright (c) 2007-2010, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

############################################################

#env "LC_ALL=C"

#use "pkgsrc-dewey.awk"
#use "power_getopt.awk"

############################################################
#.begin-str help
# pkg_cmp_summary - compares two summary files
# usage: pkg_cmp_summary -h
#        pkg_cmp_summary [OPTIONS] summary1 summary2
# OPTIONS:
#   -h         display this help
#   -p         use PKGPATH:PKGBASE pair for identifing a package
#   -c         consider packages different
#              if they have different CVS_CHECKSUM
#   -m         ignored
#   -P         use PKGPATH only for comparison, ignore PKGNAME
#   -d         consider packages different
#              if they have different DEPENDS
#   -b         consider packages different
#              if they have different BUILD_DATE, unfortunately pkgsrc
#              doesn't mark packages with UUID
#   -2         output PKGPATHe from summary1 and from summary2 (<>!=)
#   -e         normally a number of duplications is output as a result of
#              comparison if they (duplications) exist.  If -e was
#              applied, = (or !) is output if package from summary2
#              exists (or doesn't exist) in summary1
#   -u         output A at the end of line for automatically
#              installed packages and U for packages installed by user.
#              automatic=yes is expected in summary1
#.end-str
############################################################

BEGIN {
	if (getarg("h")){
		print_help()
		exit 0
	}

	with_pkgname = 1

	with_pkgpath    = getarg("p")
	use_checksum    = getarg("c")
	use_dep         = getarg("d")
	use_builddate   = getarg("b")
	check_existence = getarg("e")
	user_auto       = getarg("u")

	if (getarg("P")){
		with_pkgpath = 1
		with_pkgname = 0
	}

	output2 = getarg("2")

	for (ind=1; ind < ARGC && ARGV [ind] == ""; ++ind);

	if (ARGC != ind+2){
		print_help()
		exit 1
	}

	file1 = ARGV [ind]

	installed_by_user = 1
}

function trim (s){
	sub(/^[ \t]+/, "", s)
	sub(/[ \t]+$/, "", s)

	return s
}

with_pkgname && /^PKGNAME=/ {
	pkgname = trim(substr($0, 9))
	next
}

use_checksum && /^CVS_CHECKSUM=/ {
	checksum = trim(substr($0, 14))
	next
}

with_pkgpath && /^PKGPATH=/ {
	pkgpath = trim(substr($0, 9))
	full_pkgpath = pkgpath
	sub(/:.*$/, "", pkgpath)
	next
}

user_auto && FILENAME == file1 && /^automatic=/ {
	installed_by_user = tolower(trim(substr($0, 11))) != "yes"
	next
}

with_pkgpath && /^ASSIGNMENTS=/ {
	assigns = trim(substr($0, 13))
	next
}

use_dep && /^DEPENDS=/ {
	$0 = substr($0, 9)
	if (FILENAME == file1){
		for (i=1; i <= NF; ++i){
			dep1 [$i] = 0
		}
	}else{
		for (i=1; i <= NF; ++i){
			dep2 [$i] = 0
		}
	}
	next
}

use_builddate && /^BUILD_DATE=/ {
	build_date = substr($0, 12)
	next
}

function get_ua_sufx (pkgbase){
	if (user_auto){
		if (! (pkgbase in pkgbase2ua))
			return " ?"
		else if (pkgbase2ua [pkgbase])
			return " U"
		else
			return " A"
	}else{
		return ""
	}
}

NF == 0 {
	if (assigns != ""){
		full_pkgpath = full_pkgpath ":" assigns
		assigns = ""
	}

	# ver
	ver = pkgname
	sub(/^.*-/, "", ver)

	# pkgbase
	sub(/-[^-]+$/, "", pkgname)

	# option PKGPATH
	if (with_pkgpath && with_pkgname){
		pkgbase      = pkgpath      " " pkgname
		full_pkgbase = full_pkgpath " " pkgname
	}else if (with_pkgpath){
		pkgbase      = pkgpath
		full_pkgbase = full_pkgpath
	}else{
		pkgbase      = pkgname
		full_pkgbase = pkgname
	}

	# current checksum, build date
	curr_checksum = checksum
	curr_build_date = build_date

	# cleaning...
	pkgname = pkgpath = checksum = build_date = ""

	#
	if (FILENAME == file1){
		# first file!
		if (user_auto)
			pkgbase2ua [pkgbase] = installed_by_user

		installed_by_user = 1

		if (pkgbase in names){
			if (check_existence){
#				print "???", full_pkgbase, "!", full_pkgpaths [pkgbase]
				exists [pkgbase "-" ver] = full_pkgbase
				exists [pkgbase "-" names [pkgbase]] = full_pkgpaths [pkgbase]
			}
			duplicates [pkgbase] += 1
		}else{
			names [pkgbase] = ver
			full_pkgpaths [pkgbase] = full_pkgbase

			if (use_checksum){
				checksums [pkgbase] = curr_checksum
			}

			if (use_dep){
				for (dep in dep1){
					depends [pkgbase, ++depends_cnt [pkgbase]] = dep
				}
				delete dep1
			}

			if (use_builddate){
				build_dates [pkgbase] = curr_build_date
			}
		}
	}else{
		# second file!
		present [pkgbase] = 0

		if (user_auto){
			ua_sufx = get_ua_sufx(pkgbase)
		}

		if (pkgbase in duplicates){
			if (check_existence){
				if ((pkgbase "-" ver) in exists){
					if (output2){
						_full = exists [pkgbase "-" ver]
						sub(/ .*$/, "", _full)
						if (with_pkgname)
							print "=", _full, full_pkgbase, ver ua_sufx
						else
							print "=", _full, full_pkgbase ua_sufx
					}else{
						if (with_pkgname)
							print "=", full_pkgbase, ver ua_sufx
						else
							print "=", full_pkgbase ua_sufx
					}
				}else{
					if (ver != "")
						print "!", full_pkgbase, ver ua_sufx
					else
						print "!", full_pkgbase ua_sufx
				}
			}

			next
		}

		if (! (pkgbase in names)){
			if (ver != "")
				print "+", full_pkgbase, ver
			else
				print "+", full_pkgbase

			next
		}

		res = "="

		# ! -P
		if (with_pkgname){
			ver1 = names [pkgbase]
			res = dewey_cmp(ver1, ver)
		}

		# -c
		if (use_checksum && res == "="){
			prev_checksum = checksums [pkgbase]
			if (prev_checksum != curr_checksum)
				res = "!"
		}

		# -b
		if (use_builddate && res == "="){
			prev_build_date = build_dates [pkgbase]
			if (prev_build_date != curr_build_date)
				res = "!"
		}

		# -d
		if (use_dep && res == "="){
			if (pkgbase in depends_cnt){
				cnt = depends_cnt [pkgbase]
				for (i=1; i <= cnt; ++i){
					dep = depends [pkgbase, i]
					if (dep in dep2){
						delete dep2 [dep]
					}else{
						res = "!"
						break
					}
				}
				if (res == "="){
					for (dep in dep2){
						res = "!"
						break
					}
				}
			}else{
				res = "!"
			}
			delete dep2
		}

		#
		if (output2){
			_full = full_pkgpaths [pkgbase]
			sub(/ .*$/, "", _full)
			if (with_pkgname)
				print res, _full, full_pkgbase, ver1, ver ua_sufx
			else
				print res, _full, full_pkgbase ua_sufx
		}else{
			if (with_pkgname)
				print res, full_pkgbase, ver1, ver ua_sufx
			else
				print res, full_pkgbase ua_sufx
		}
	}

	next
}

END {
	for (pkgbase in names){
		if (user_auto){
			ua_sufx = get_ua_sufx(pkgbase)
		}

		if (! (pkgbase in present)){
			if (names [pkgbase] != ""){
				nm = " " names [pkgbase]
			}else{
				nm = ""
			}

			print "-", full_pkgpaths [pkgbase] nm ua_sufx

			delete duplicates [pkgbase]
		}else if (!check_existence && (pkgbase in duplicates)){
			print duplicates [pkgbase]+1, pkgbase
		}
	}
}
