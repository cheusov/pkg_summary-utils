#!@SH@
#-*-mode:  sh -*-

# Copyright (c) 2007-2010, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -e

export LC_ALL=C

usage (){
    cat 1>&2 <<EOF
pkg_grep_summary - output summaries about packages that matches
the specified condition, summaries are read from stdin.

USAGE: pkg_grep_summary -h
       pkg_grep_summary [opts] -e <field>
       pkg_grep_summary [opts] -m <field> <regexp>
       pkg_grep_summary [opts] -s <field> <string>
       pkg_grep_summary [opts] -S <field> <file>
       pkg_grep_summary [opts] -t <strategy> <field> <condition>
       pkg_grep_summary [opts]    <field> <awk_condition>
       pkg_grep_summary -T
  <field>         - PKGBASE, PKGNAME, PKGPATH, DEPENDS etc.
  <awk_condition> - Boolean expression written in AWK language
  <regexp>        - AWK regular expression
  <string>        - Text string
  <strategy>      - Search strategy. See -T for a list of available
                    search strategies.
OPTIONS:
  -h          display this message
  -i          ignore case
  -v          invert the sense of matching
  -f <fields> output only the specified fields, by default
              the whole summary is output
  -r          exit status is non-zero if nothing was found
  -R          -r + "No matches found" is output to stderr

  -t          matches <field> using search strategy <strategy>
              and condition specified in <condition>
  -e          matches empty and absent fields,
              synonym to "-t empty"
  -m          matches <field> against regular expression <regexp>,
              synonym for "-t re"
  -s          matches <field> equal to <string>,
              synonym for "-t exact"
  -S          matches <field> equal to any string in <file>,
              one string per line,
              synonym for "-t strfile"

  -T          displays all search strategies available for -t and exits
EOF
}

strats=0
while test $# -ne 0; do
    case "$1" in
	-h|--help)
	    usage
	    exit 0;;
	-e|--empty)
	    strategy=empty
	    field=$2
	    shift;;
	-s)
	    strategy=exact
	    field=$2
	    string=$3
	    shift
	    shift;;
	-S)
	    strategy=strfile
	    field=$2
	    string=$3
	    shift
	    shift;;
	-m)
	    strategy=re
	    field=$2
	    string=$3
	    shift
	    shift;;
	-t)
	    strategy=$2
	    field=$3
	    string=$4
	    shift
	    shift
	    shift;;
	-T)
	    strats=$(($strats+1));;
	-f)
	    fields="$2"
	    shift;;
	-f*)
	    fields=`echo "$1" | cut -b3-`;;
	-i)
	    ic=1;;
	-r)
	    error=1;;
	-R)
	    error=1
	    error_msg='No matches found';;
	-v)
	    invert=1;;
	--)
	    shift
	    break;;
	-*)
	    echo "Bad option $1" 1>&2
	    exit 1;;
	*)
	    break
    esac
    shift
done

show_strats (){
    cat <<'EOF'
exact	Match exactly
prefix	Match prefixes
suffix	Match suffixes
substring	Match substring
word	Match separate words
first	Match the first word
last	Match the last word
re	POSIX 1003.2 (modern) regular expressions
strfile	Match the words from file
strlist	Match the specified words
awk	Match using AWK expression
empty	Match an empty string
kw	"keyword" match
EOF
}

if test "$strats" -gt 1; then
    show_strats
    exit 0
elif test "$strats" -eq 1; then
    strategies=`show_strats | cut -f1`
    echo $strategies
    exit 0
fi

if test $# -eq 2 -a -z "$strategy"; then
    strategy=awk
    field="$1"
    string="$2"
    shift
    shift
elif test $# -eq 0; then
    true
else
    usage
    exit 1
fi

case "$strategy" in
    exact)
	condition='fvalue == string';;
    prefix)
	condition='has_prefix(fvalue, string) != 0';;
    suffix)
	condition='has_suffix(fvalue, string) != 0';;
    substring)
	condition='index(fvalue, string) > 0';;
    first)
	condition='match_first_word(fvalue, string)';;
    last)
	condition='match_last_word(fvalue, string)';;
    word)
	condition='match_word(fvalue, string)';;
    re)
	condition='fvalue ~ string';;
    strfile)
	condition='fvalue in strings';;
    strlist)
	condition='fvalue in strings';;
    awk)
	condition="$string";;
    empty)
	condition='fvalue == ""';;
    kw|keywords)
	strategy=kw
	condition='match_keywords(fvalue)';;
    *)
	echo "Unknown search strategy: $strategy" 1>&2
	exit 1;;
esac

runawk -v ic="$ic" -v reqd_fields_="$fields" -v invert="$invert" \
       -v string="$string" -v strategy="$strategy" \
       -v error="$error" -v error_msg="$error_msg" \
-e '
#use "pkg_grep_summary.awk"
#use "xgetline.awk"
#use "str2regexp.awk"

BEGIN {
   if (strategy == "strfile"){
      while(xgetline0(string)){
         strings [$0] = 1
      }
      close(string)
   }else if (strategy == "strlist"){
      cnt = split(string, arr)
      for (i=1; i <= cnt; ++i){
         strings [arr [i]] = 1
      }
   }else if (strategy == "kw"){
      cnt_kw = split(string, arr_kw)
      for (i=1; i <= cnt_kw; ++i){
         if (i > 1)
            re_kw = re_kw "|"
         re_kw = re_kw str2regexp(arr_kw [i])
      }
      re_kw = "(" re_kw ")"
   }

   grep_summary__field="'"$field"'"
   keep_fields = (grep_summary__field == "" || grep_summary__field == ".")
}

function grep_summary__condition (){
   return '"$condition"'
}
'
