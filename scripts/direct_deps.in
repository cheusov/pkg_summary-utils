#!/usr/bin/env runawk

#.begin-str help
# direct_deps - takes summaries on input and a list of already
# processed packages and outputs enriched PKGPATHs for direct
# dependencies (either DEPENDS or BUILD_DEPENDS or both) provided that
# they are not listed in "processed packages". Output PKGPATHs
# contain the value of _INHER_ASSIGNS from input summary if it is present.
#
# Usage: direct_deps [OPTIONS] [files...]
# OPTIONS:
#    -h               display this screen
#    -d               generate summary for dependancies (DEPENDS)
#    -D               generate summary for build dependancies (BUILD_DEPENDS)
#    =p <filename>    already processed packages
#.end-str

#env "LC_ALL=C"

#use "alt_assert.awk"
#use "xgetline.awk"
#use "braceexpand.awk"
#use "power_getopt.awk"

BEGIN {
	if (getarg("h")){
		print_help()
		exitnow(0)
	}

	with_dep          = getarg("d")
	with_bdep         = getarg("D")
	processed_pkgs_fn = getarg("p")

	assert(processed_pkgs_fn != "")

	while (xgetline0(processed_pkgs_fn)){
	    processed_pkgs [$0] = 1
	}
}

/^PKGPATH=/ {
	pkgpath = substr($0, 9)
	next
}

/^ASSIGNMENTS=/ {
	assigns = substr($0, 13)
	next
}

/^_INHER_ASSIGNS=/ {
	inher_assigns = ":" substr($0, 16)
	next
}

NF == 0 {
	if (assigns != "")
		pkgpath = pkgpath ":" assigns

	pkgpaths [pkgpath] = 1

	inher_assigns = assigns = pkgpath = ""
	next
}

(with_dep && /^DEPENDS=/) || (with_bdep && /^BUILD_DEPENDS=/)  {
	sub(/^[^=]*=/, "")
	for (i=1; i <= NF; ++i){
		if ($i ~ /[{]/){
			$i = braceexpand($i)
			sub(/ .*$/, "", $i)
		}
		gsub(/[^ ]*:[.][.]\/[.][.]\//, "", $i)
		sub(/\/+$/, "", $i)
		depends [$i inher_assigns] = 1
	}
	next
}

END {
	for (d in depends){
		if (! (d in pkgpaths) && ! (d in processed_pkgs)){
			print d
		}
	}
}
